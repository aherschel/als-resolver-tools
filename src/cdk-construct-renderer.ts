import { ts } from 'ts-morph';

export const generateCdkConstructFile = (): ts.SourceFile => ts.factory.createSourceFile(
  [
    ts.factory.createImportDeclaration(
      undefined,
      ts.factory.createImportClause(
        false,
        undefined,
        ts.factory.createNamedImports([ts.factory.createImportSpecifier(
          false,
          undefined,
          ts.factory.createIdentifier('Construct')
        )])
      ),
      ts.factory.createStringLiteral('constructs'),
      undefined
    ),
    ts.factory.createImportDeclaration(
      undefined,
      ts.factory.createImportClause(
        false,
        undefined,
        ts.factory.createNamespaceImport(ts.factory.createIdentifier('appsync'))
      ),
      ts.factory.createStringLiteral('aws-cdk-lib/aws-appsync'),
      undefined
    ),
    ts.factory.createTypeAliasDeclaration(
      [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
      ts.factory.createIdentifier('GeneratedResolverProps'),
      undefined,
      ts.factory.createTypeLiteralNode([ts.factory.createPropertySignature(
        undefined,
        ts.factory.createIdentifier('api'),
        undefined,
        ts.factory.createTypeReferenceNode(
          ts.factory.createQualifiedName(
            ts.factory.createIdentifier('appsync'),
            ts.factory.createIdentifier('GraphqlApi')
          ),
          undefined
        )
      )])
    ),
    ts.factory.createClassDeclaration(
      [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
      ts.factory.createIdentifier('GeneratedResolves'),
      undefined,
      [ts.factory.createHeritageClause(
        ts.SyntaxKind.ExtendsKeyword,
        [ts.factory.createExpressionWithTypeArguments(
          ts.factory.createIdentifier('Construct'),
          undefined
        )]
      )],
      [ts.factory.createConstructorDeclaration(
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('scope'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createIdentifier('Construct'),
              undefined
            ),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('id'),
            undefined,
            ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
            undefined
          ),
          ts.factory.createParameterDeclaration(
            undefined,
            undefined,
            ts.factory.createIdentifier('props'),
            undefined,
            ts.factory.createTypeReferenceNode(
              ts.factory.createIdentifier('GeneratedResolverProps'),
              undefined
            ),
            undefined
          )
        ],
        ts.factory.createBlock(
          [ts.factory.createExpressionStatement(ts.factory.createCallExpression(
            ts.factory.createSuper(),
            undefined,
            [
              ts.factory.createIdentifier('scope'),
              ts.factory.createIdentifier('id')
            ]
          ))],
          true
        )
      )]
    )
  ],
  ts.factory.createToken(ts.SyntaxKind.EndOfFileToken),
  0,
);
